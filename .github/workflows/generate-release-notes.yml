name: Create Release on Merge

on:
  push:
    branches:
      - main  # Trigger when merged into `main`

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed to track commits

      - name: Set Git Identity
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Generate release version
        id: version
        run: echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: notes
        run: |
          # Get the latest merge commit of the release branch into main
          LAST_MERGE=$(git log --merges --pretty=format:'%H' -n 1)
          
          # Get the release branch name from the merge commit
          RELEASE_BRANCH=$(git log -1 --pretty=format:'%P' $LAST_MERGE | awk '{print $2}')
          
          # Define team branches based on naming conventions
          RETENTION_BRANCH="release-retention/"
          ACTIVATION_BRANCH="release-activation/"
          
          # Initialize release notes
          NOTES="## Changes in this release\n"

          # Extract unique commits per team branch
          get_commits() {
            BRANCH=$1
            CATEGORY=$2
            COMMITS=$(git log --pretty=format:'- **%h**: %s' --no-merges $(git merge-base main $BRANCH)..$BRANCH)
            if [[ ! -z "$COMMITS" ]]; then
              NOTES+="\n### $CATEGORY\n$COMMITS\n"
            fi
          }

          # Process team branches
          for BRANCH in $(git branch -r | grep -E "$RETENTION_BRANCH|$ACTIVATION_BRANCH"); do
            if [[ $BRANCH == *"$RETENTION_BRANCH"* ]]; then
              get_commits "$BRANCH" "Retention"
            elif [[ $BRANCH == *"$ACTIVATION_BRANCH"* ]]; then
              get_commits "$BRANCH" "Activation"
            fi
          done

          # Store results in environment
          echo "NOTES=$NOTES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: "${{ env.NOTES }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG
        run: |
          echo -e "## Release ${{ env.VERSION }}\n" >> CHANGELOG.md
          echo -e "${{ env.NOTES }}" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update changelog for ${{ env.VERSION }}"
          git push origin main
