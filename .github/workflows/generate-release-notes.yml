name: Create Release on Merge

on:
  push:
    branches:
      - main  # Trigger when code is merged into `main`

jobs:
  release:
    permissions:
      contents: write  # Required to publish the release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to track commits correctly

      - name: Set Git Identity
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Generate release version
        id: version
        run: echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: notes
        run: |
          # Get the latest merge commit of the main release branch
          LAST_MERGE=$(git log --merges --pretty=format:'%H' -n 1)

          # Identify the main release branch that was merged
          RELEASE_BRANCH=$(git rev-parse $LAST_MERGE^2)

          # Extract team branches merged into the release branch
          TEAM_BRANCHES=$(git log --merges --pretty=format:'%H' $RELEASE_BRANCH | xargs -I {} git rev-parse {}^2)

          # Initialize release notes
          NOTES="## Changes in this release\n"

          for BRANCH in $TEAM_BRANCHES; do
            BRANCH_NAME=$(git branch -r --contains $BRANCH | grep -o 'release-[^/]*' | head -n 1)

            if [[ $BRANCH_NAME == "release-retention" ]]; then
              NOTES+="\n### Retention\n"
            elif [[ $BRANCH_NAME == "release-activation" ]]; then
              NOTES+="\n### Activation\n"
            else
              NOTES+="\n### Other Changes ($BRANCH_NAME)\n"
            fi

            # Get commits unique to this branch
            COMMITS=$(git log $(git merge-base main $BRANCH)..$BRANCH --pretty=format:'- **%h**: %s' --no-merges)

            # Append commits to notes
            NOTES+="$COMMITS\n"
          done

          echo "NOTES=$NOTES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: "${{ env.NOTES }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG
        run: |
          echo -e "## Release ${{ env.VERSION }}\n" >> CHANGELOG.md
          echo -e "${{ env.NOTES }}" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update changelog for ${{ env.VERSION }}"
          git push origin main
