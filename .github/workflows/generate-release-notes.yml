name: Generate Release Notes

on:
  push:
    branches:
      - main

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full commit history

      - name: Fetch all branches
        run: git fetch --prune --all

      - name: Detect Latest Release Date
        run: |
          RELEASE_BRANCH=$(git branch -r --sort=-committerdate | grep "release/daily" | head -n 1 | sed 's/origin\///')
          RELEASE_DATE=$(echo "$RELEASE_BRANCH" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2}")
          
          echo "Detected Release Branch: $RELEASE_BRANCH"
          echo "Detected Release Date: $RELEASE_DATE"

          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      - name: Set Team Branches
        run: |
          RETENTION_BRANCH="release-retention/daily/$RELEASE_DATE"
          ACTIVATION_BRANCH="release-activation/daily/$RELEASE_DATE"

          echo "RETENTION_BRANCH=$RETENTION_BRANCH" >> $GITHUB_ENV
          echo "ACTIVATION_BRANCH=$ACTIVATION_BRANCH" >> $GITHUB_ENV

          echo "Checking for team branches: origin/$RETENTION_BRANCH and origin/$ACTIVATION_BRANCH"

      - name: Generate Release Notes
        run: |
          echo "## Changes in this release" > release_notes.md
          echo "" >> release_notes.md

          # Function to get individual commits from a merged branch
          get_commits() {
            BRANCH_NAME=$1
            echo "### ${BRANCH_NAME^} Team" >> release_notes.md

            if git ls-remote --exit-code origin "$BRANCH_NAME" >/dev/null; then
              MERGE_COMMIT=$(git log --oneline --merges --grep="$BRANCH_NAME" | head -n 1 | awk '{print $1}')
              
              if [ -z "$MERGE_COMMIT" ]; then
                echo "No merge commit found for $BRANCH_NAME. Skipping..." >> release_notes.md
              else
                echo "Merge commit for $BRANCH_NAME: $MERGE_COMMIT"
                
                # Find the merge base (common ancestor) between main and the branch
                MERGE_BASE=$(git merge-base origin/main origin/"$BRANCH_NAME")

                # Get commits that were part of the branch before merging
                COMMITS=$(git log --oneline --no-merges "$MERGE_BASE"..origin/"$BRANCH_NAME" || echo "No new commits.")
                
                echo -e "$COMMITS" >> release_notes.md
              fi
            else
              echo "No $BRANCH_NAME branch for $RELEASE_DATE." >> release_notes.md
            fi
            echo "" >> release_notes.md
          }

          # Get commits for both teams
          get_commits "$ACTIVATION_BRANCH"
          get_commits "$RETENTION_BRANCH"

          cat release_notes.md

      - name: Upload Release Notes as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
