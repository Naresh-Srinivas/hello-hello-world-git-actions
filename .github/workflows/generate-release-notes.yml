name: Generate Release Notes

on:
  push:
    branches:
      - main

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: git fetch --prune --all

      - name: Detect Latest Release Date
        run: |
          RELEASE_BRANCH=$(git branch -r --sort=-committerdate | grep "release/daily" | head -n 1 | sed 's/origin\///')
          RELEASE_DATE=$(echo "$RELEASE_BRANCH" | grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2}")

          echo "Detected Release Branch: $RELEASE_BRANCH"
          echo "Detected Release Date: $RELEASE_DATE"

          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV

      - name: Set Team Branches
        run: |
          RETENTION_BRANCH="release-retention/daily/$RELEASE_DATE"
          ACTIVATION_BRANCH="release-activation/daily/$RELEASE_DATE"
          LENDING_BRANCH="release-lending/daily/$RELEASE_DATE"
          NEK_BRANCH="release-nek/daily/$RELEASE_DATE"

          echo "Checking for team branches: origin/$RETENTION_BRANCH, origin/$ACTIVATION_BRANCH, origin/$LENDING_BRANCH, origin/$NEK_BRANCH"

      - name: Generate Release Notes
        run: |
          echo "## Changes in this release" > release_notes.md
          echo "" >> release_notes.md

          get_team_commits() {
            TEAM_NAME=$1
            TEAM_BRANCH="release-${TEAM_NAME,,}/daily/$RELEASE_DATE"

            echo "### ${TEAM_NAME^}/$RELEASE_DATE Team" >> release_notes.md

            # Find the merge commit that merged this team branch into origin/main
            MERGE_COMMIT=$(git log --oneline --merges --grep="$TEAM_BRANCH" origin/main | head -n 1 | awk '{print $1}')

            if [[ -z "$MERGE_COMMIT" ]]; then
              echo "No merge commit found for $TEAM_BRANCH. Skipping..." >> release_notes.md
            else
              echo "Merge commit for $TEAM_BRANCH: $MERGE_COMMIT"

              # Get feature branches merged into this team branch before it was merged into main
              TEAM_COMMITS=$(git log --oneline --merges --first-parent origin/"$TEAM_BRANCH" --reverse || echo "No feature merges found.")

              if [[ -z "$TEAM_COMMITS" ]]; then
                echo "No $TEAM_NAME-related merge commits found." >> release_notes.md
              else
                echo -e "$TEAM_COMMITS" >> release_notes.md
              fi
            fi
            echo "" >> release_notes.md
          }

          # Run for all teams
          get_team_commits "Activation"
          get_team_commits "Retention"
          get_team_commits "Lending"
          get_team_commits "Nek"

          cat release_notes.md

      - name: Upload Release Notes as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
